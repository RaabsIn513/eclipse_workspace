package novice.nonRelease;

//import java.io.File;
import java.util.Arrays;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.graphics.Color;
import android.media.AudioRecord;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;

import com.androidplot.series.XYSeries;
import com.androidplot.xy.BoundaryMode;
import com.androidplot.xy.LineAndPointFormatter;
import com.androidplot.xy.SimpleXYSeries;
import com.androidplot.xy.XYPlot;

public class RecordAudioActivity extends Activity {
	
    //private static final String LOG_TAG = "AudioRecordTest";
    private boolean isRec = false;
    private Thread recordingThread = null;
    private AudioRecord mRecorder = null;
    private XYPlot mPlot;
    private Number[] mPlotData = new Number[4096];
    private byte[] audioData = new byte[4096];
    //private MediaPlayer   mPlayer = null;
    private static final int offsetInBytes = 0;
    private static final int sampleRateInHz = 16000;
    private static final int channelConfig = android.media.AudioFormat.CHANNEL_IN_DEFAULT;
    //private static final int audioFormat = android.media.AudioFormat.ENCODING_DEFAULT;
    private static final int audioFormat = android.media.AudioFormat.ENCODING_PCM_16BIT;
    private int bufferSize = 0;
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        setButtonHandlers();
        enableButtons(false);
        
        // Create to display our data. 
        mPlot = (XYPlot) findViewById(R.id.simpleXYPlot);
        
        bufferSize = AudioRecord.getMinBufferSize(sampleRateInHz, channelConfig, audioFormat);
        
        // FIXME: don't know why .getMinBufferSize always returns -2 error
        if( bufferSize < 0 )
        	bufferSize = 4096;
    }

    public void startRec()
    {
    	mRecorder = new  AudioRecord(MediaRecorder.AudioSource.MIC, 
    			sampleRateInHz, channelConfig, audioFormat, bufferSize);
    	
    	if( mRecorder.getState() > 0 ) // Initialized
    	{
			try{
				mRecorder.startRecording();
				isRec = true;
			}catch( IllegalStateException e ){
				alertBox(".startRecording() fail:", e.toString());
			}
			recordingThread = new Thread(new Runnable() {
			        
			        @Override
			        public void run() {
			                recThread();
			        }
			},"AudioRecorder Thread");
		    
		    recordingThread.start();
    	}
    	else
    		alertBox( "Unitialized", "AudioRecord object wasn't initialized correctly.");
    }
    
    // ------------ FUNCTIONAL  ACTIONS -------------
	// This function runs in its own thread...
    public void recThread() 
	{		
		int result = 0;
	    audioData = new byte[bufferSize];
	    // While the record button is pressed...
    	while( isRec )
    	{
	    	result = mRecorder.read(audioData, offsetInBytes, bufferSize);
	    	
	    	// TODO: Implement file stream recording possibly..
			//if( result != AudioRecord.ERROR_INVALID_OPERATION )
			//	bytes_as_Str += audioData.toString() + "\n";
	    	
	    	if ( result == AudioRecord.ERROR_INVALID_OPERATION )
	    	{
	    		alertBox(".read() failed", "unable to perform AudioRecord.read()\n exiting");
	    		break;
	    	}
	    	//plotData( audioData );
    	}
    }

    public void plotData( byte[] data )
    {
    	Number[] ptsAsNums = new Number[data.length];
    	XYSeries ptData;
    	int min = 0;
    	int max = 0;
    	for( int i = 0; i < data.length; i++ )
    	{
    		ptsAsNums[i] = Math.abs(( data[i] & 0xff ) << (8 * i)); 
    		if( ptsAsNums[i].intValue() < min )
    			min = ptsAsNums[i].intValue();
    		if( ptsAsNums[i].intValue() > max )
    			max = ptsAsNums[i].intValue();
    	}

    	ptsAsNums[0] = 12;
    	ptsAsNums[1] = 14;
    	ptsAsNums[2] = 33;
    	ptsAsNums[4] = 100;
    	    	
    	mPlot.centerOnRangeOrigin(ptsAsNums[0], max, BoundaryMode.AUTO);
    	mPlot.setDomainBoundaries(ptsAsNums[0], max, BoundaryMode.AUTO);
    	ptData = new SimpleXYSeries(
                Arrays.asList(ptsAsNums),          // SimpleXYSeries takes a List so turn our array into a List
                SimpleXYSeries.ArrayFormat.Y_VALS_ONLY, // Y_VALS_ONLY means use the element index as the x value
                "ByteData");
    	
        LineAndPointFormatter series1Format = new LineAndPointFormatter(
                Color.rgb(0, 200, 0),                   // line color
                Color.rgb(0, 100, 0),                   // point color
                Color.rgb(150, 190, 150));              // fill color (optional)
        
        // Add series1 to the xyplot:
        mPlot.addSeries(ptData, series1Format);
        
        // Reduce the number of range labels
        mPlot.setTicksPerRangeLabel(3);
 
        // By default, AndroidPlot displays developer guides to aid in laying out your plot.
        // To get rid of them call disableAllMarkup():
        mPlot.disableAllMarkup();
    }
    
    public void stopRec()
    {
    	isRec = false;

    	// print out data. function prints first 15 bytes
    	//alertBox( "::data::", audioData );
    	plotData( audioData );
    	
    	mRecorder.stop();
    	mRecorder.release();
    	
    	mRecorder = null;
    	recordingThread = null;
    }
    
    private void setButtonHandlers() {
        ((Button)findViewById(R.id.startRec)).setOnClickListener(btnClick);
	((Button)findViewById(R.id.stopRec)).setOnClickListener(btnClick);
	}
	
	private void enableButton(int id,boolean isEnable){
	        ((Button)findViewById(id)).setEnabled(isEnable);
	}
	
	private void enableButtons(boolean isRecording) {
	        enableButton(R.id.startRec,!isRecording);
	        enableButton(R.id.stopRec, isRecording);
	}
	
    private View.OnClickListener btnClick = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
                switch(v.getId()){
                        case R.id.startRec:{
                                //AppLog.logString("Start Recording");
                                
                                enableButtons(true);
                                startRec();
                                                
                                break;
                        }
                        case R.id.stopRec:{
                                //AppLog.logString("Start Recording");
                                
                                enableButtons(false);
                                stopRec();
                                
                                break;
                        }
                }
        }
}; 
    
    // ------------ Debugging purposes -------------- 
    
	protected void alertBox(String title, String myMessage)
    {
	    new AlertDialog.Builder(this)
	       .setMessage(myMessage)
	       .setTitle(title)
	       .setCancelable(false)
	       .setNeutralButton(android.R.string.cancel,
	          new DialogInterface.OnClickListener() {
	          public void onClick(DialogInterface dialog, int whichButton){}
	          })
	       .show();
    }
    
    protected void alertBox(String title, Object[] myMessage)
    {
    	String convToStr = new String();
    	int maxLen = 15; // max of 15 lines...
    	if ( myMessage.length < maxLen )
    		maxLen = myMessage.length;
    	for( int i = 0; i < myMessage.length; i++)
    		convToStr += myMessage[i].toString() + "\n";
    	
    	
	    new AlertDialog.Builder(this)
	       .setMessage(convToStr)
	       .setTitle(title)
	       .setCancelable(false)
	       .setNeutralButton(android.R.string.cancel,
	          new DialogInterface.OnClickListener() {
	          public void onClick(DialogInterface dialog, int whichButton){}
	          })
	       .show();
    }
    
    protected void alertBox(String title, byte[] myMessage)
    {
    	String convToStr = new String();
    	int maxLen = 15; // max of 15 lines...
    	if ( myMessage.length < maxLen )
    		maxLen = myMessage.length;
    	
    	for( int i = 0; i < maxLen; i++)
    		convToStr += String.valueOf( myMessage[i] ) + "\n";
    	
	    new AlertDialog.Builder(this)
	       .setMessage(convToStr)
	       .setTitle(title)
	       .setCancelable(false)
	       .setNeutralButton(android.R.string.cancel,
	          new DialogInterface.OnClickListener() {
	          public void onClick(DialogInterface dialog, int whichButton){}
	          })
	       .show();
    }
    
    private void alertBox(String title, int number) {
    	String convToStr = new String();  	
    	convToStr = String.valueOf(number);
    	
	    new AlertDialog.Builder(this)
	       .setMessage(convToStr)
	       .setTitle(title)
	       .setCancelable(false)
	       .setNeutralButton(android.R.string.cancel,
	          new DialogInterface.OnClickListener() {
	          public void onClick(DialogInterface dialog, int whichButton){}
	          })
	       .show();	
	}
}