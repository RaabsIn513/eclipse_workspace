package com.example;

import java.text.DecimalFormat;
import java.util.LinkedList;
import java.util.Observable;
import java.util.Observer;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.graphics.Color;
import android.os.Bundle;

import com.androidplot.xy.BoundaryMode;
import com.androidplot.xy.LineAndPointFormatter;
import com.androidplot.xy.SimpleXYSeries;
import com.androidplot.xy.XYPlot;
import com.androidplot.xy.XYSeriesFormatter;
import com.androidplot.xy.XYStepMode;

public class TestPlotActivity extends Activity {
	
    // redraws a plot whenever an update is received:
    private class mPlotUpdater implements Observer {
        XYPlot plot;
        int index = 0;
        // Constructor sets up the series
        public mPlotUpdater(XYPlot plot) {
            this.plot = plot;
            
            plot.setRangeBoundaries(-180, 359, BoundaryMode.FIXED);
            plot.setDomainBoundaries(0, 30, BoundaryMode.FIXED);
            
            LineAndPointFormatter series1Format = new LineAndPointFormatter(
                    Color.rgb(0, 200, 0),                   // line color
                    Color.rgb(0, 100, 0),                   // point color
                    null);              // fill color (optional)
            
            plot.addSeries(randHistSeries, series1Format);
            

            plot.setDomainStepValue(5);
            plot.setTicksPerRangeLabel(3);
            plot.setDomainLabel("Sample Index");
            plot.getDomainLabelWidget().pack();
            plot.setRangeLabel("Angle (Degs)");
            plot.getRangeLabelWidget().pack();
            plot.disableAllMarkup();
        }

		@Override
        public void update(Observable o, Object arg) {
            	//o.notifyObservers();
            	dataGen income = (dataGen)arg;
				
				if( randHist.size() > HISTORY_SIZE )
					randHist.removeFirst();
				
				Number debug = income.getY();
				
				randHist.addLast( debug );
				
				randHistSeries.setModel(randHist, SimpleXYSeries.ArrayFormat.Y_VALS_ONLY);
				
				try {
					dynamicPlot.postRedraw();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
        }
    }
	
    private XYPlot dynamicPlot = null;
    private mPlotUpdater plotUpdater;
    private SimpleXYSeries randHistSeries = new SimpleXYSeries("random");
    private LinkedList<Number> randHist = new LinkedList<Number>();
    private final int HISTORY_SIZE = 30;
    
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        // get handles to our View defined in layout.xml:
        dynamicPlot = (XYPlot) findViewById(R.id.dynamicPlot);
 
        plotUpdater = new mPlotUpdater(dynamicPlot);
        
        // only display whole numbers in domain labels
        dynamicPlot.getGraphWidget().setDomainValueFormat(new DecimalFormat("0"));

        // getInstance and position data sets:
        dataGen data = new dataGen();
        audioGen audioData = new audioGen();
        
        DynamicSeries randSeries = new DynamicSeries(data, "RandSeries");        
        
        LineAndPointFormatter lpf = new LineAndPointFormatter(Color.rgb(0, 0, 0), Color.rgb(0, 80, 0),  
                Color.rgb(200, 50, 50));
        // create a series using a temporary formatter, with a transparent fill applied immediately
        dynamicPlot.addSeries(randSeries, lpf );
                
        dynamicPlot.setGridPadding(5, 0, 5, 0);
        
        // hook up the plotUpdater to the data model:
        data.addObserver(plotUpdater);
        
        dynamicPlot.setDomainStepMode(XYStepMode.SUBDIVIDE);
        dynamicPlot.setDomainStepValue(randSeries.size());
        
        // thin out domain/range tick labels so they don't overlap each other:
        dynamicPlot.setTicksPerDomainLabel(5);
        dynamicPlot.setTicksPerRangeLabel(3);
        dynamicPlot.disableAllMarkup();
 
        // freeze the range boundaries:
        dynamicPlot.setRangeBoundaries(-100, 100, BoundaryMode.AUTO);
        //dynamicPlot.setDomainBoundaries(0, 100, BoundaryMode.AUTO);
        
        // kick off the data generating thread:
        new Thread(data).start();
        
    }
}